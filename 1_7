.text:00010BB2 sub_10BB2       proc near               ; CODE XREF: sub_11CCC+1Dp
.text:00010BB2                                         ; sub_13344+13p ...
.text:00010BB2
.text:00010BB2 arg_4           = dword ptr  8
.text:00010BB2
.text:00010BB2                 mov     eax, [esp+4]
.text:00010BB6                 push    ebx
.text:00010BB7                 push    esi
.text:00010BB8                 mov     esi, [eax+3Ch]
.text:00010BBB                 add     esi, eax
.text:00010BBD                 movzx   eax, word ptr [esi+14h]
.text:00010BC1                 xor     ebx, ebx
.text:00010BC3                 cmp     [esi+6], bx
.text:00010BC7                 push    edi
.text:00010BC8                 lea     edi, [eax+esi+18h]
.text:00010BCC                 jbe     short loc_10BEB
.text:00010BCE
.text:00010BCE loc_10BCE:                              ; CODE XREF: sub_10BB2+37j
.text:00010BCE                 push    [esp+0Ch+arg_4] ; _DWORD
.text:00010BD2                 push    edi             ; _DWORD
.text:00010BD3                 call    ds:dword_169A4
.text:00010BD9                 test    eax, eax
.text:00010BDB                 pop     ecx
.text:00010BDC                 pop     ecx
.text:00010BDD                 jz      short loc_10BF3
.text:00010BDF                 movzx   eax, word ptr [esi+6]
.text:00010BE3                 add     edi, 28h
.text:00010BE6                 inc     ebx
.text:00010BE7                 cmp     ebx, eax
.text:00010BE9                 jb      short loc_10BCE
.text:00010BEB
.text:00010BEB loc_10BEB:                              ; CODE XREF: sub_10BB2+1Aj
.text:00010BEB                 xor     eax, eax
.text:00010BED
.text:00010BED loc_10BED:                              ; CODE XREF: sub_10BB2+43j
.text:00010BED                 pop     edi
.text:00010BEE                 pop     esi
.text:00010BEF                 pop     ebx
.text:00010BF0                 retn    8
.text:00010BF3 ; ---------------------------------------------------------------------------
.text:00010BF3
.text:00010BF3 loc_10BF3:                              ; CODE XREF: sub_10BB2+2Bj
.text:00010BF3                 mov     eax, edi
.text:00010BF5                 jmp     short loc_10BED
.text:00010BF5 sub_10BB2       endp
.text:00010BF5
.text:00010BF5 ; ---------------------------------------------------------------------------
.text:00010BF7                 db 0CCh ; Â¦ OFF32 SEGDEF [0,575653CC]

(PE Reference)
https://en.wikibooks.org/wiki/X86_Disassembly/Windows_Executable_Files

```
.text:00010BB2                 mov     eax, [esp+4]

Get start to pe file (DOS_header)

.text:00010BB6                 push    ebx
.text:00010BB7                 push    esi
.text:00010BB8                 mov     esi, [eax+3Ch]

 struct DOS_Header 
 {
// short is 2 bytes, long is 4 bytes
     char signature[2] = "MZ";
     short lastsize;
     short nblocks;
     short nreloc;
     short hdrsize;
     short minalloc;
     short maxalloc;
     void *ss; // 2 byte value
     void *sp; // 2 byte value
     short checksum;
     void *ip; // 2 byte value
     void *cs; // 2 byte value
     short relocpos;
     short noverlay;
     short reserved1[4];
     short oem_id;
     short oem_info;
     short reserved2[10];
     long  e_lfanew; // Offset to the 'PE\0\0' signature relative to the beginning of the file
 }
 
esi = dos_header->e_lfanew

.text:00010BBB                 add     esi, eax

(PEOptHeader*) esi = dos_header + dos_header->e_lfanew

.text:00010BBD                 movzx   eax, word ptr [esi+14h]

 struct PEOptHeader
 {
/* 64 bit version of the PE Optional Header also known as IMAGE_OPTIONAL_HEADER64
char is 1 byte
short is 2 bytes
long is 4 bytes
long long is 8 bytes
*/
    short signature; //decimal number 267 for 32 bit, 523 for 64 bit, and 263 for a ROM image. 
    char MajorLinkerVersion; 
    char MinorLinkerVersion;
    long SizeOfCode;
    long SizeOfInitializedData;
    long SizeOfUninitializedData;
    long AddressOfEntryPoint;  //The RVA of the code entry point
    long BaseOfCode;
    /*The next 21 fields are an extension to the COFF optional header format*/
    long long ImageBase;
    long SectionAlignment;
    long FileAlignment;
    short MajorOSVersion;
    short MinorOSVersion;
    short MajorImageVersion;
    short MinorImageVersion;
    short MajorSubsystemVersion;
    short MinorSubsystemVersion;
    long Win32VersionValue;
    long SizeOfImage;
    long SizeOfHeaders;
    long Checksum;
    short Subsystem;
    short DLLCharacteristics;
    long long SizeOfStackReserve;
    long long SizeOfStackCommit;
    long long SizeOfHeapReserve;
    long long SizeOfHeapCommit;
    long LoaderFlags;
    long NumberOfRvaAndSizes;
    data_directory DataDirectory[NumberOfRvaAndSizes];     //Can have any number of elements, matching the number in NumberOfRvaAndSizes.
 }                                        //However, it is always 16 in PE files.
 
 

.text:00010BC1                 xor     ebx, ebx
.text:00010BC3                 cmp     [esi+6], bx
.text:00010BC7                 push    edi
.text:00010BC8                 lea     edi, [eax+esi+18h]
.text:00010BCC                 jbe     short loc_10BEB
.text:00010BCE
.text:00010BCE loc_10BCE:                              ; CODE XREF: sub_10BB2+37j
.text:00010BCE                 push    [esp+0Ch+arg_4] ; _DWORD
.text:00010BD2                 push    edi             ; _DWORD
.text:00010BD3                 call    ds:dword_169A4
.text:00010BD9                 test    eax, eax
.text:00010BDB                 pop     ecx
.text:00010BDC                 pop     ecx
.text:00010BDD                 jz      short loc_10BF3
.text:00010BDF                 movzx   eax, word ptr [esi+6]
.text:00010BE3                 add     edi, 28h
.text:00010BE6                 inc     ebx
.text:00010BE7                 cmp     ebx, eax
.text:00010BE9                 jb      short loc_10BCE
.text:00010BEB
.text:00010BEB loc_10BEB:                              ; CODE XREF: sub_10BB2+1Aj
.text:00010BEB                 xor     eax, eax
.text:00010BED
.text:00010BED loc_10BED:                              ; CODE XREF: sub_10BB2+43j
.text:00010BED                 pop     edi
.text:00010BEE                 pop     esi
.text:00010BEF                 pop     ebx
.text:00010BF0                 retn    8


```

