.text:00010BB2 sub_10BB2       proc near               ; CODE XREF: sub_11CCC+1Dp
.text:00010BB2                                         ; sub_13344+13p ...
.text:00010BB2
.text:00010BB2 arg_4           = dword ptr  8
.text:00010BB2
.text:00010BB2                 mov     eax, [esp+4]
.text:00010BB6                 push    ebx
.text:00010BB7                 push    esi
.text:00010BB8                 mov     esi, [eax+3Ch]
.text:00010BBB                 add     esi, eax
.text:00010BBD                 movzx   eax, word ptr [esi+14h]
.text:00010BC1                 xor     ebx, ebx
.text:00010BC3                 cmp     [esi+6], bx
.text:00010BC7                 push    edi
.text:00010BC8                 lea     edi, [eax+esi+18h]
.text:00010BCC                 jbe     short loc_10BEB
.text:00010BCE
.text:00010BCE loc_10BCE:                              ; CODE XREF: sub_10BB2+37j
.text:00010BCE                 push    [esp+0Ch+arg_4] ; _DWORD
.text:00010BD2                 push    edi             ; _DWORD
.text:00010BD3                 call    ds:dword_169A4
.text:00010BD9                 test    eax, eax
.text:00010BDB                 pop     ecx
.text:00010BDC                 pop     ecx
.text:00010BDD                 jz      short loc_10BF3
.text:00010BDF                 movzx   eax, word ptr [esi+6]
.text:00010BE3                 add     edi, 28h
.text:00010BE6                 inc     ebx
.text:00010BE7                 cmp     ebx, eax
.text:00010BE9                 jb      short loc_10BCE
.text:00010BEB
.text:00010BEB loc_10BEB:                              ; CODE XREF: sub_10BB2+1Aj
.text:00010BEB                 xor     eax, eax
.text:00010BED
.text:00010BED loc_10BED:                              ; CODE XREF: sub_10BB2+43j
.text:00010BED                 pop     edi
.text:00010BEE                 pop     esi
.text:00010BEF                 pop     ebx
.text:00010BF0                 retn    8
.text:00010BF3 ; ---------------------------------------------------------------------------
.text:00010BF3
.text:00010BF3 loc_10BF3:                              ; CODE XREF: sub_10BB2+2Bj
.text:00010BF3                 mov     eax, edi
.text:00010BF5                 jmp     short loc_10BED
.text:00010BF5 sub_10BB2       endp
.text:00010BF5
.text:00010BF5 ; ---------------------------------------------------------------------------
.text:00010BF7                 db 0CCh ; Â¦ OFF32 SEGDEF [0,575653CC]

(PE Reference)
http://www.openrce.org/reference_library/files/reference/PE%20Format.pdf

struct _IMAGE_DOS_HEADER {
  ...
  0x3c DWORD e_lfanew;
};

```
.text:00010BB2                 mov     eax, [esp+4]

Get start to pe file (DOS_header)

.text:00010BB6                 push    ebx
.text:00010BB7                 push    esi
.text:00010BB8                 mov     esi, [eax+3Ch]

esi = dos_header->e_lfanew

.text:00010BBB                 add     esi, eax

(_IMAGE_NT_HEADERS*) esi = dos_header + dos_header->e_lfanew

```

struct _IMAGE_NT_HEADERS {
  0x00 DWORD Signature;
  0x04 _IMAGE_FILE_HEADER FileHeader;
    struct _IMAGE_FILE_HEADER {
      0x00 WORD Machine;
      0x02 WORD NumberOfSections;
      0x04 DWORD TimeDateStamp;
      0x08 DWORD PointerToSymbolTable;
      0x0c DWORD NumberOfSymbols;
      0x10 WORD SizeOfOptionalHeader;
      0x12 WORD Characteristics;
    };
  0x18 _IMAGE_OPTIONAL_HEADER OptionalHeader;
    struct _IMAGE_OPTIONAL_HEADER {
      0x00 WORD Magic;
      0x02 BYTE MajorLinkerVersion;
      0x03 BYTE MinorLinkerVersion;
      0x04 DWORD SizeOfCode;
      0x08 DWORD SizeOfInitializedData;
      0x0c DWORD SizeOfUninitializedData;
      0x10 DWORD AddressOfEntryPoint;
      0x14 DWORD BaseOfCode;
      0x18 DWORD BaseOfData;
      0x1c DWORD ImageBase;
      0x20 DWORD SectionAlignment;
      0x24 DWORD FileAlignment;
      0x28 WORD MajorOperatingSystemVersion;
      0x2a WORD MinorOperatingSystemVersion;
      0x2c WORD MajorImageVersion;
      0x2e WORD MinorImageVersion;
      0x30 WORD MajorSubsystemVersion;
      0x32 WORD MinorSubsystemVersion;
      0x34 DWORD Win32VersionValue;
      0x38 DWORD SizeOfImage;
      0x3c DWORD SizeOfHeaders;
      0x40 DWORD CheckSum;
      0x44 WORD Subsystem;
      0x46 WORD DllCharacteristics;
      0x48 DWORD SizeOfStackReserve;
      0x4c DWORD SizeOfStackCommit;
      0x50 DWORD SizeOfHeapReserve;
      0x54 DWORD SizeOfHeapCommit;
      0x58 DWORD LoaderFlags;
      0x5c DWORD NumberOfRvaAndSizes;
      0x60 _IMAGE_DATA_DIRECTORY DataDirectory[16];
    };
};

```
.text:00010BBD                 movzx   eax, word ptr [esi+14h]

[esi + 0x14] = FileHeader (0x4) + SizeOfOptionalHeader (0x10)

WORD eax = SizeOfOptionalHeader

```

typedef struct _IMAGE_SECTION_HEADER {
  0x00 BYTE Name[IMAGE_SIZEOF_SHORT_NAME];
  union {
  0x08 DWORD PhysicalAddress;
  0x08 DWORD VirtualSize;
  } Misc;
  0x0c DWORD VirtualAddress;
  0x10 DWORD SizeOfRawData;
  0x14 DWORD PointerToRawData;
  0x18 DWORD PointerToRelocations;
  0x1c DWORD PointerToLinenumbers;
  0x20 WORD NumberOfRelocations;
  0x22 WORD NumberOfLinenumbers;
  0x24 DWORD Characteristics;
};

```
.text:00010BC1                 xor     ebx, ebx
.text:00010BC3                 cmp     [esi+6], bx
.text:00010BC7                 push    edi
.text:00010BC8                 lea     edi, [eax+esi+18h]
.text:00010BCC                 jbe     short loc_10BEB

(_IMAGE_SECTION_HEADER*)edi = eax(SizeOfOptionalHeader) + esi(_IMAGE_NT_HEADERS*) + 0x18(Distance between _IMAGE_NT_HEADERS and _IMAGE_OPTIONAL_HEADER)

[esi + 0x6] = FileHeader (0x4) + NumberOfSections (0x2)
if(NumberOfSections == 0)
{
  goto loc_10BEB
}

```

```
.text:00010BCE
.text:00010BCE loc_10BCE:                              ; CODE XREF: sub_10BB2+37j
.text:00010BCE                 push    [esp+0Ch+arg_4] ; _DWORD
.text:00010BD2                 push    edi             ; _DWORD
.text:00010BD3                 call    ds:dword_169A4

Get argument offsetted at ebp + 8. (two arguments)

ret = dword_169A4((_IMAGE_SECTION_HEADER*) edi, arg2)

.text:00010BD9                 test    eax, eax
.text:00010BDB                 pop     ecx
.text:00010BDC                 pop     ecx
.text:00010BDD                 jz      short loc_10BF3

if(ret == 0)
 goto end

```

```
.text:00010BDF                 movzx   eax, word ptr [esi+6]

eax = NumberOfSections

.text:00010BE3                 add     edi, 28h

(_IMAGE_SECTION_HEADER*)edi += 1

We are at section header #1 ... Number of sections

.text:00010BE6                 inc     ebx

ebx += 1

.text:00010BE7                 cmp     ebx, eax
.text:00010BE9                 jb      short loc_10BCE

Sums up to a for loop ...

for(ebx = 0; ebx < eax(NumberOfSections); ebx++)
  dword_169A4((_IMAGE_SECTION_HEADER*) edi, *(ebp + arg_4))
  
.text:00010BEB
.text:00010BEB loc_10BEB:                              ; CODE XREF: sub_10BB2+1Aj
.text:00010BEB                 xor     eax, eax
.text:00010BED
.text:00010BED loc_10BED:                              ; CODE XREF: sub_10BB2+43j
.text:00010BED                 pop     edi
.text:00010BEE                 pop     esi
.text:00010BEF                 pop     ebx
.text:00010BF0                 retn    8

```

```C

#define DIST_IMAGE_NT_HEADER 0x18 //(Distance between _IMAGE_NT_HEADERS and _IMAGE_OPTIONAL_HEADER)

int SearchForSomethingInSectionsOfPeHeader(_IMAGE_DOS_HEADER* dos_header, int some_value)
{
  _IMAGE_NT_HEADERS* nt_header = (_IMAGE_NT_HEADERS*)(dos_header + dos_header->e_lfanew);
  WORD size_of_optional_header = nt_header.FileHeader.SizeOfOptionalHeader;
  WORD number_of_sections = nt_header.FileHeader.NumberOfSections;
  _IMAGE_OPTIONAL_HEADER* optional_header = nt_header + DIST_IMAGE_NT_HEADER;
  _IMAGE_SECTION_HEADER* section_header = optional_header + size_of_optional_header;
  
  for(int i = 0; i < number_of_sections; i++)
  {
    if(!*dword_169A4(section_header, some_value))
    {
      return ???;
    }
    section_header += sizeof(_IMAGE_SECTION_HEADER);
  }
  return 0;
}

```


