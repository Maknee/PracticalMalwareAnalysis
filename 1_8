.text:0001172E ; =============== S U B R O U T I N E =======================================
.text:0001172E
.text:0001172E
.text:0001172E sub_1172E       proc near               ; CODE XREF: sub_11798+115p
.text:0001172E                                         ; sub_11798+157p
.text:0001172E
.text:0001172E arg_0           = dword ptr  4
.text:0001172E
.text:0001172E                 push    esi
.text:0001172F                 mov     esi, [esp+4+arg_0]
.text:00011733                 dec     esi
.text:00011734                 jz      short loc_1175F
.text:00011736                 dec     esi
.text:00011737                 jz      short loc_11755
.text:00011739                 dec     esi
.text:0001173A                 jz      short loc_1174B
.text:0001173C                 sub     esi, 9
.text:0001173F                 jnz     short loc_1176B
.text:00011741                 mov     esi, [eax+8]
.text:00011744                 shr     esi, 1
.text:00011746                 add     eax, 0Ch
.text:00011749                 jmp     short loc_11767
.text:0001174B ; ---------------------------------------------------------------------------
.text:0001174B
.text:0001174B loc_1174B:                              ; CODE XREF: sub_1172E+Cj
.text:0001174B                 mov     esi, [eax+3Ch]
.text:0001174E                 shr     esi, 1
.text:00011750                 add     eax, 5Eh
.text:00011753                 jmp     short loc_11767
.text:00011755 ; ---------------------------------------------------------------------------
.text:00011755
.text:00011755 loc_11755:                              ; CODE XREF: sub_1172E+9j
.text:00011755                 mov     esi, [eax+3Ch]
.text:00011758                 shr     esi, 1
.text:0001175A                 add     eax, 44h
.text:0001175D                 jmp     short loc_11767
.text:0001175F ; ---------------------------------------------------------------------------
.text:0001175F
.text:0001175F loc_1175F:                              ; CODE XREF: sub_1172E+6j
.text:0001175F                 mov     esi, [eax+3Ch]
.text:00011762                 shr     esi, 1
.text:00011764                 add     eax, 40h
.text:00011767
.text:00011767 loc_11767:                              ; CODE XREF: sub_1172E+1Bj
.text:00011767                                         ; sub_1172E+25j ...
.text:00011767                 mov     [ecx], esi
.text:00011769                 mov     [edx], eax
.text:0001176B
.text:0001176B loc_1176B:                              ; CODE XREF: sub_1172E+11j
.text:0001176B                 pop     esi
.text:0001176C                 retn    4
.text:0001176C sub_1172E       endp
.text:0001176C
.text:0001176C ; ---------------------------------------------------------------------------
.text:0001176F                 align 10h
.text:00011770

```
.text:0001172E                 push    esi
.text:0001172F                 mov     esi, [esp+4+arg_0]
.text:00011733                 dec     esi
.text:00011734                 jz      short loc_1175F
.text:00011736                 dec     esi
.text:00011737                 jz      short loc_11755
.text:00011739                 dec     esi
.text:0001173A                 jz      short loc_1174B
.text:0001173C                 sub     esi, 9
.text:0001173F                 jnz     short loc_1176B

Seems like a switch statement. 

switch(arg)
{
  case 1:
    loc_1175F
    break;
  case 2:
    loc_11755
    break
  case 3:
    loc_1174B
    break;
  case 12:
    00011741
    break;
  default:
    loc_1176B
}

```

Seems like EAX is a pointer to some structure by observing how many times eax was accessed and how it was accessed

typedef struct unknown1
{
  ...
  DWORD off_8;
}unknown1;

```
CASE 12
.text:00011741                 mov     esi, [eax+8]
.text:00011744                 shr     esi, 1
.text:00011746                 add     eax, 0Ch
.text:00011749                 jmp     short loc_11767

unkown1->off_8 <<= 1;
(PCHAR)unkown1 += 0x12

```

typedef struct unknown1
{
  ...
  DWORD off_8;
  ...
  DWORD off_3C;
}unknown1;

```
CASE 3

.text:0001174B ; ---------------------------------------------------------------------------
.text:0001174B
.text:0001174B loc_1174B:                              ; CODE XREF: sub_1172E+Cj
.text:0001174B                 mov     esi, [eax+3Ch]
.text:0001174E                 shr     esi, 1
.text:00011750                 add     eax, 5Eh
.text:00011753                 jmp     short loc_11767

DWORD val = unknown1->off_3C << 1;
(PCHAR)unkown1 += 0x5E;

```

```
CASE 2

.text:00011755 ; ---------------------------------------------------------------------------
.text:00011755
.text:00011755 loc_11755:                              ; CODE XREF: sub_1172E+9j
.text:00011755                 mov     esi, [eax+3Ch]
.text:00011758                 shr     esi, 1
.text:0001175A                 add     eax, 44h
.text:0001175D                 jmp     short loc_11767

DWORD val = unknown1->off_3C << 1;
(PCHAR)unkown1 += 0x44;

```

```
CASE 1

.text:0001175F ; ---------------------------------------------------------------------------
.text:0001175F
.text:0001175F loc_1175F:                              ; CODE XREF: sub_1172E+6j
.text:0001175F                 mov     esi, [eax+3Ch]
.text:00011762                 shr     esi, 1
.text:00011764                 add     eax, 40h
.text:00011767

DWORD val = unknown1->off_3C << 1;
(PCHAR)unkown1 += 0x40;

```

```
.text:00011767 loc_11767:                              ; CODE XREF: sub_1172E+1Bj
.text:00011767                                         ; sub_1172E+25j ...
.text:00011767                 mov     [ecx], esi
.text:00011769                 mov     [edx], eax


esi (value) is stored in ecx (a pointer?)
eax (our struct*) is store into another data type

```

```C
typedef struct unknown1
{
  ...
  DWORD off_8;
  unknown1* off_12;
  ...
  DWORD off_3C;
  ...
  unknown1* off_40;
  unknown1* off_44;
  ...
  unknown1* off_5E;
}unknown1;

typedef enum
{
  OPT1 = 1;
  OPT2 = 2;
  OPT3 = 3;
  OPT12 = 12;
}OPTION;

void sub_1172E(__EAX__ struct unknown1* unk1, __ECX__ DWORD* unk2, __EDX__ struct unknown1** unk3, OPTION opt)
{
  DWORD val = unk1->off_3C << 1;
  switch(opt)
  {
    case OPT1:
      unk1 = &unk1->off_40;
      break;
    case OPT2:
      unk1 = &unk1->off_44;
      break;
    case OPT3:
      unk1 = &unk1->off_5E;
      break;
    case OPT12:
      unk1 = &unk1->off_12;
      break;
    default:
      return;
  }
  
  *unk2 = val;
  *unk3 = unk1;
  
}


```


